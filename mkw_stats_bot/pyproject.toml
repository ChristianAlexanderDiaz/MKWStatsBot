# =============================================================================
# MKW Stats Bot - Project Configuration
# =============================================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mkw-stats-bot"
version = "2.0.0"
description = "Professional Discord bot for Mario Kart clan statistics with OCR processing"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "MKW Stats Bot Team", email = "your-email@example.com"}
]
keywords = ["discord", "bot", "mario-kart", "ocr", "statistics", "postgresql"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Image Recognition",
]

dependencies = [
    "discord.py>=2.0.0",
    "pytesseract>=0.3.8",
    "opencv-python>=4.5.0",
    "numpy>=1.19.0",
    "Pillow>=8.0.0",
    "python-dotenv>=0.19.0",
    "psycopg2-binary>=2.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/mkw-stats-bot"
Repository = "https://github.com/your-username/mkw-stats-bot"
Issues = "https://github.com/your-username/mkw-stats-bot/issues"
Documentation = "https://github.com/your-username/mkw-stats-bot/docs"

[project.scripts]
mkw-stats-bot = "main:main"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.setuptools.packages.find]
where = ["."]
include = ["mkw_stats*", "admin*", "testing*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_third_party = ["discord", "psycopg2", "pytesseract", "cv2", "numpy", "PIL"]
known_first_party = ["mkw_stats", "admin", "testing"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "data",
    "docs",
    "scripts",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "cv2.*",
    "pytesseract.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=mkw_stats",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["testing"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mkw_stats"]
omit = [
    "*/tests/*",
    "*/testing/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

[tool.bandit]
exclude_dirs = ["tests", "testing", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert and shell=True warnings for development