@startuml
title Mario Kart World Stats Bot - Complete Architecture

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
}

skinparam package {
    BackgroundColor LightGray
    BorderColor DarkGray
}

skinparam rectangle {
    BackgroundColor LightGreen
    BorderColor DarkGreen
}

' Main Application Package
package "mkw_stats/" {
    class Bot {
        +client: discord.Client
        +db_manager: DatabaseManager
        +ocr_processor: OCRProcessor
        --
        +on_ready()
        +on_message()
        +process_image()
        +handle_confirmation()
        +setup_commands()
    }

    class Commands {
        +mkstats()
        +mkrecent()
        +mkdbinfo()
        +mkmanual()
        +mkroster()
        +mkadd()
        +mkremove()
        +mkupdate()
        +mksave()
        +mkhelp()
        +mkpreset()
        --
        +edit_war_results()
        +confirmation_workflow()
    }

    class DatabaseManager {
        +pool: asyncpg.Pool
        +connection_pool: 1-10 connections
        --
        +create_connection_pool()
        +ensure_tables_exist()
        +add_player()
        +resolve_player_name()
        +save_war_results()
        +get_player_stats()
        +update_statistics()
        +health_check()
    }

    class OCRProcessor {
        +table_preset: str
        +db_manager: DatabaseManager
        --
        +process_image()
        +preprocess_image()
        +extract_text_from_image()
        +find_clan_members_in_text()
        +validate_results()
        +load_presets()
        +save_preset()
        +process_image_with_preset()
    }

    class Config {
        +BOT_VERSION: "1.0.13"
        +DISCORD_TOKEN: str
        +DATABASE_URL: str
        +CLAN_ROSTER: List[24 members]
        +TESSERACT_PATH: str
        +TABLE_PRESETS: Dict
        --
        Score Range: 12-180
        Player Count: 1-20 (ideal: 12)
        War Format: 6v6, 12 races
    }

    class LoggingConfig {
        +setup_logging()
        +log_ocr_processing()
        +log_database_operation()
        +log_discord_event()
        --
        Console + File handlers
        Rotation: 10MB, 5 backups
        Colored output
    }
}

' Management Scripts
package "management/" {
    class SetupPlayers {
        +populate_clan_roster()
        +create_initial_data()
    }

    class ManageNicknames {
        +add_nickname()
        +remove_nickname()
        +list_nicknames()
    }

    class CheckDatabase {
        +verify_connection()
        +check_tables()
        +validate_data()
    }

    class ResetDatabase {
        +reset_all_data()
        +backup_data()
        +restore_data()
    }
}

' Testing Suite
package "testing/" {
    class TestDatabase {
        +test_connection()
        +test_queries()
        +test_data_integrity()
    }

    class TestOCR {
        +test_image_processing()
        +test_text_extraction()
        +test_score_validation()
    }

    package "sample_images/" {
        class SampleData {
            Table screenshots
            Test cases
            Format examples
        }
    }
}

' External Dependencies
package "External Systems" {
    rectangle "PostgreSQL Database" as DB {
        class "players" as PlayersTable {
            +id : SERIAL PRIMARY KEY
            +name : VARCHAR UNIQUE
            +nicknames : JSONB
            +total_wars : INTEGER
            +total_score : INTEGER
            +average_score : DECIMAL
            +statistics : JSONB
            +created_at : TIMESTAMP
            +updated_at : TIMESTAMP
        }
        
        class "race_sessions" as SessionsTable {
            +id : SERIAL PRIMARY KEY
            +session_date : DATE
            +session_time : TIME
            +race_count : INTEGER
            +war_type : VARCHAR
            +notes : TEXT
            +results : JSONB
            +created_at : TIMESTAMP
        }
    }

    class "Discord API" as Discord {
        +Events
        +Commands
        +Reactions
        +Image Uploads
    }

    class "Tesseract OCR" as Tesseract {
        +Text Extraction
        +Image Processing
        +Multiple Configs
    }

    class "Railway Platform" as Railway {
        +PostgreSQL Hosting
        +Application Deployment
        +Environment Variables
    }
}

' Data Storage
package "data/" {
    class "database/" as DataFolder {
        +mario_kart_clan.db
        +SQLite fallback
    }

    class "formats/" as FormatsFolder {
        +ice_mario.json
        +Table1.png
        +Region coordinates
        +[576,101] to [1064,1015]
    }

    class "logs/" as LogsFolder {
        +mario_kart_bot.log
        +Application logs
        +Rotating files
    }
}

' Configuration Files
package "Deployment Config" {
    class "Dockerfile" as DockerFile {
        +Python 3.11-slim
        +Tesseract installation
        +System dependencies
    }

    class "railway.toml" as RailwayConfig {
        +builder = "dockerfile"
        +startCommand = "python main.py"
    }

    class "nixpacks.toml" as NixpacksConfig {
        +Python provider
        +Tesseract packages
        +Environment variables
    }

    class "requirements.txt" as Requirements {
        +discord.py>=2.0.0
        +pytesseract>=0.3.8
        +opencv-python-headless>=4.5.0
        +psycopg2-binary>=2.9.0
        +numpy, Pillow, python-dotenv
    }
}

' Entry Point
class "main.py" as MainEntry {
    +Application entry point
    +Bot initialization
    +Error handling
}

' Relationships and Data Flow

' Main application flow
main.py --> Bot
Bot --> Commands
Bot --> DatabaseManager
Bot --> OCRProcessor
Bot --> LoggingConfig

' Configuration dependencies
Bot --> Config
Commands --> Config
DatabaseManager --> Config
OCRProcessor --> Config

' Database interactions
DatabaseManager --> DB
Bot --> DB
Commands --> DB

' External service connections
Bot --> Discord
OCRProcessor --> Tesseract
DatabaseManager --> Railway

' Management script relationships
SetupPlayers --> DatabaseManager
ManageNicknames --> DatabaseManager
CheckDatabase --> DatabaseManager
ResetDatabase --> DatabaseManager

' Testing relationships
TestDatabase --> DatabaseManager
TestOCR --> OCRProcessor
TestOCR --> SampleData

' Data flow arrows
OCRProcessor --> FormatsFolder : "Load presets"
DatabaseManager --> DataFolder : "Fallback storage"
LoggingConfig --> LogsFolder : "Write logs"

' Processing workflow
note right of Bot
    **Image Processing Workflow:**
    1. Discord image upload detected
    2. Download and validate image
    3. OCR processing with presets
    4. Text extraction and parsing
    5. Player/score validation
    6. User confirmation (✅❌✏️)
    7. Database storage
    8. Statistics update
end note

note right of DatabaseManager
    **Database Features:**
    • Connection pooling (1-10)
    • JSONB for flexible data
    • Automatic indexing
    • Nickname resolution
    • Statistics calculation
    • Health monitoring
end note

note right of OCRProcessor
    **OCR Pipeline:**
    • Auto-detect Tesseract
    • Multiple preprocessing
    • Region-based cropping
    • Score validation (12-180)
    • Player name matching
    • Confidence scoring
end note

' Deployment note
note bottom
    **Deployment Stack:**
    Railway Platform → Nixpacks → Python 3.11 + Tesseract
    PostgreSQL Database → Connection Pooling → Discord Bot
    Environment Variables → Configuration Management
end note

@enduml